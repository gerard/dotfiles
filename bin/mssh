# vim: set filetype=sh :
MSSH_CONFIG_FILE=$HOME/.mssh
MSSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q"

MSSH_IP=
MSSH_USER=
MSSH_PASS=
MSSH_HOMEDIR=

function __mssh_get_conf_for_host {
    while read CONFIG_LINE
    do
        __HOST=`awk '{ print $2 }' <<< $CONFIG_LINE`
        [ "$__HOST" != "$1" ] && continue

        MSSH_HOST=$__HOST
        MSSH_IP=`awk '{ print $1 }' <<< $CONFIG_LINE`
        MSSH_USER=`awk '{ print $3 }' <<< $CONFIG_LINE`
        MSSH_PASS=`awk '{ print $4 }' <<< $CONFIG_LINE`
        MSSH_HOMEDIR=`awk '{ print $5 }' <<< $CONFIG_LINE`
    done < $MSSH_CONFIG_FILE

    [ -z "$MSSH_IP" ] && echo "E: No such host" && return 1
    return 0
}

function __mssh_expect_run {
    expect -c "
        log_user 0
        set timeout 30
        expect *
        spawn $@
        expect {
            -re \".assword\" { send \"$MSSH_PASS\r\" }
            -re . { exp_continue }
        }
        expect \n
        log_user 1
        interact
    "
}

function __cmd_mssh {
    REMOTE_CMD=$@
    [ $TERM == "screen" ] && echo -en "\ek$MSSH_HOST\e\\"
    __mssh_expect_run ssh $MSSH_OPTS $MSSH_USER@$MSSH_IP $REMOTE_CMD
    [ $TERM == "screen" ] && echo -en "\ekbash\e\\"
}

function __cmd_mscpget {
    FILE=$1
    LOCALDIR=$2

    [ -z "$FILE" ] && echo "E: Usage: mscpget host remotefile [localdir]" && return 1
    [ -z "$LOCALDIR" ] && LOCALDIR=`pwd`
    [ ! -d "$LOCALDIR" ] && echo "E: [localdir] must be a directory" && return 1

    __mssh_expect_run scp $MSSH_OPTS -r $MSSH_USER@$MSSH_IP:$FILE $LOCALDIR
}

function __cmd_mscpput {
    FILE=$1
    REMOTEDIR=$2

    [ -z "$FILE" ] && echo "E: Usage: mscpget host localfile [remotedir]" && return 1
    [ -z "$LOCALDIR" ] && REMOTEDIR='~'

    __mssh_expect_run scp $MSSH_OPTS -r $FILE $MSSH_USER@$MSSH_IP:$REMOTEDIR
}

MSSH_CMD=`basename $0`
[ -z "$1" ] && echo "E: No hostname given" && return 1
__mssh_get_conf_for_host $1 && shift && __cmd_$MSSH_CMD $@
