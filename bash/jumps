# vim: set filetype=sh :

if [ $BASH_VERSINFO -lt 3 ] 
then
    # Ancient bash version, forget about this
    return
fi

JUMP_CONF=$HOME/.jumps
# This calculates the hash of the identifier and stores the jump
function __load_jump {
    HASH_HEX=`md5sum - <<< $1 | dd bs=8 count=1 2> /dev/null | tr [:lower:] [:upper:]`
    HASH_DEC=`bc <<< "ibase=16;$HASH_HEX"`
    JUMP_HASH_TABLE[$HASH_DEC]=$2
}

# Clear before re-reading
unset JUMP_HASH_TABLE
if [ -f $JUMP_CONF ]
then
    while read LINE
    do
        TAG=`awk '{ print $1 }' <<< $LINE`
        JUMP=`awk '{ print $2 }' <<< $LINE`
        __load_jump $TAG $JUMP
    done < $JUMP_CONF
fi
unset __load_jump


# Public functionality
function jump {
    # If the parameter starts with a dash, get it and shift
    JUMP_OP="none"
    [[ $1 == -* ]] && JUMP_OP=$1 && shift
    TAG=$1

    # If there is no tag parameter, assume the current basename
    [ -z "$TAG" ] && TAG=`basename $PWD`

    HASH_HEX=`md5sum - <<< $1 | dd bs=8 count=1 2> /dev/null | tr [:lower:] [:upper:]`
    HASH_DEC=`bc <<< "ibase=16;$HASH_HEX"`
    JUMPTO=${JUMP_HASH_TABLE[$HASH_DEC]}

    case "$JUMP_OP" in
    --add)
        [ ! -z "$JUMPTO" ] && echo "That jump already exists: $JUMPTO" && return 1
        echo "$TAG $PWD" >> $JUMP_CONF

        # This is unoptimal, but reasonable: makes the changes visible
        reload
        ;;
    --del|--help)
        echo "Not implemented"
        ;;
    --*)
        echo "Unknown argument"
        ;;
    none)
        [ -z "$JUMPTO" ] && echo "No such jump" && return 1
        cd $JUMPTO
        ;;
    esac
}
